openapi: 3.0.3
info:
  title: STD24001
  description: This is a specification for STD24001
  version: 1.0.0
servers:
  - url: http://localhost:8000
paths:
  /ping:
    get:
      responses:
        '200':
          description: Return a simple pong string
          content:
            text/plain:
              schema:
                example: pong
  /cars:
    post:
      requestBody:
        description: A list containing the new cars to be added
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Car'
      responses:
        '201':
          description: The new cars added to the list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
  /cars/{id}:
    get:
      parameters:
        - $ref: '#/components/parameters/Identifier'
      responses:
        '200':
          description: The car with its id mentionned in the path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: The car mentionned does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_message'
              example: {"message": "We don't have data on the car you are searching"}
    put:
      requestBody:
        description: The new characteristics of the car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Characteristics'
      responses:
        '201':
          description: The characteristics of the new car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: The updated cars
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_message'
              example: {"message": "We don't have data on the car you are searching"}
components:
  parameters:
    Identifier:
      name: id
      in: path
      required: false
      schema:
        type: integer
  schemas:
    Error_message:
      type: object
      properties:
        message:
          type: string
    Car:
      type: object
      allOf:
        - $ref: '#/components/schemas/Characteristics'
      properties:
        identifier:
          type: string
        brand:
          type: string
        model:
          type: string
    Characteristics:
      type: object
      properties:
        max_speed:
          type: integer
        max_fuel_capacity:
          type: integer